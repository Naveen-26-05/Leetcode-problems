class Solution {
public:
const int mod = 1e9+7;
    long long getPathSum(int i , int j , int n ,vector<vector<int>>& matrix,  vector<vector<long long>>&dp){
        if(i==n && j<= n && j>=0)return matrix[i][j];
        if(i>n || j>n || j<0 || i<0)return INT_MAX;
        if(dp[i][j]!=-1)return dp[i][j];
        long long res=INT_MAX;
        for(int x=0;x<=n;x++){
            if(x!=j){
                res=min(res,matrix[i][j] + getPathSum(i+1,x,n,matrix,dp));
            }
        }
        return dp[i][j] = res;
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n= matrix.size();
        vector<vector<long long>>dp(n+1,vector<long long>(n+1, -1));
        long long res=INT_MAX;
        for(int i=0;i<n;i++){
            long long temp_res = getPathSum(0,i,n-1,matrix,dp);
            res=min(res,temp_res);
        }
        return res;
    }
};
